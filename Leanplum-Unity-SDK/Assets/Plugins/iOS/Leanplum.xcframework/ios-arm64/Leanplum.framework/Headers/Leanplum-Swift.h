#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef LEANPLUM_SWIFT_H
#define LEANPLUM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#import <Leanplum/Leanplum.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Leanplum",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class LPActionContext;

SWIFT_CLASS("_TtCC8Leanplum13ActionManager16ActionDefinition")
@interface ActionDefinition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Nested ActionArgs
@property (nonatomic, copy) NSDictionary * _Nonnull values;
/// ActionArgs name and ActionArgs Kind
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull kinds;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name args:(NSArray * _Nonnull)args kind:(LeanplumActionKind)kind options:(NSDictionary<NSString *, NSString *> * _Nonnull)options presentAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))presentAction dismissAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))dismissAction OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull json;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LPActionArg;

@interface ActionDefinition (SWIFT_EXTENSION(Leanplum))
+ (nonnull instancetype)actionWithName:(NSString * _Nonnull)name args:(NSArray<LPActionArg *> * _Nonnull)args options:(NSDictionary<NSString *, NSString *> * _Nonnull)options presentAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))presentAction dismissAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))dismissAction SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)messageWithName:(NSString * _Nonnull)name args:(NSArray<LPActionArg *> * _Nonnull)args options:(NSDictionary<NSString *, NSString *> * _Nonnull)options presentAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))presentAction dismissAction:(BOOL (^ _Nullable)(LPActionContext * _Nonnull))dismissAction SWIFT_WARN_UNUSED_RESULT;
@end

@class MessageDisplayChoice;
@class ActionsTrigger;

SWIFT_CLASS_NAMED("ActionManager")
@interface LPActionManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPActionManager * _Nonnull shared;)
+ (LPActionManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSArray<ActionDefinition *> * _Nonnull definitions;
@property (nonatomic, copy) NSDictionary * _Nonnull messages;
/// Raw messages data received from the API
@property (nonatomic, copy) NSDictionary * _Nonnull messagesDataFromServer;
@property (nonatomic, copy) NSDictionary * _Nonnull actionDefinitionsFromServer;
/// When disabled, it stops executing actions and new actions will not be added to the queue.
@property (nonatomic) BOOL isEnabled;
/// When paused, it stops executing actions but new actions will continue to be added to the queue
/// Value will be changed to <code>false</code> when app is in background and to <code>true</code> when app enters foreground
@property (nonatomic) BOOL isPaused;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Called per message to decide whether to show, discard or delay it.
/// note:
/// to delay a message indefinitely, use delay with value -1
- (void)shouldDisplayMessage:(MessageDisplayChoice * _Nonnull (^ _Nullable)(LPActionContext * _Nonnull))callback;
/// Called when the message is displayed.
- (void)onMessageDisplayed:(void (^ _Nullable)(LPActionContext * _Nonnull))callback;
/// Called when the message is dismissed.
- (void)onMessageDismissed:(void (^ _Nullable)(LPActionContext * _Nonnull))callback;
/// Called when a message action is executed.
- (void)onMessageAction:(void (^ _Nullable)(NSString * _Nonnull, LPActionContext * _Nonnull))callback;
/// Called when there are multiple messages to be displayed. Messages are ordered by Priority.
/// Messages can be reordered or removed if desired. Removed messages will not be presented.
/// Messages will be presented one after another in the order returned.
/// note:
/// If this function is not implemented, the first message is presented only.
/// \param callback contexts - messages’ contexts and trigger - the action trigger that triggered the messages
///
///
/// returns:
/// the messages that should be presented in that order
- (void)prioritizeMessages:(NSArray<LPActionContext *> * _Nonnull (^ _Nullable)(NSArray<LPActionContext *> * _Nonnull, ActionsTrigger * _Nullable))callback;
@end




@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
@end

@class LPContextualValues;

SWIFT_CLASS("_TtCC8Leanplum13ActionManager14ActionsTrigger")
@interface ActionsTrigger : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable condition;
@property (nonatomic, readonly, strong) LPContextualValues * _Nullable contextualValues;
- (nonnull instancetype)initWithEventName:(NSString * _Nullable)eventName condition:(NSArray<NSString *> * _Nullable)condition contextualValues:(LPContextualValues * _Nullable)contextualValues OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
@end






@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
/// Merges in-app messages and actions arguments with default ones from ActionDefinition
/// Downloads files for action arguments
- (void)processMessagesAndDownloadFiles:(NSDictionary * _Nonnull)messages;
@end


@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
@end


SWIFT_CLASS("_TtCC8Leanplum13ActionManager20MessageDisplayChoice")
@interface MessageDisplayChoice : NSObject
+ (nonnull instancetype)show SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)discard SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)delayWithSeconds:(NSInteger)seconds SWIFT_WARN_UNUSED_RESULT;
/// Delays the action indefinitely - until <code>triggerDelayedMessages</code> is called
+ (nonnull instancetype)delayIndefinitely SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
- (void)defineActionWithDefinition:(ActionDefinition * _Nonnull)definition;
- (ActionDefinition * _Nullable)definitionWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


enum Priority : NSInteger;

@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
- (void)triggerWithContexts:(NSArray * _Nonnull)contexts priority:(enum Priority)priority trigger:(ActionsTrigger * _Nullable)trigger;
/// Triggers all postponed messages when indefinite time was used with <code>MessageDisplayChoice</code>
- (void)triggerDelayedMessages;
@end

typedef SWIFT_ENUM(NSInteger, Priority, open) {
  PriorityHigh = 0,
  PriorityDefault = 1,
};


@interface LPActionManager (SWIFT_EXTENSION(Leanplum))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ActionArgFilePrefix;)
+ (NSString * _Nonnull)ActionArgFilePrefix SWIFT_WARN_UNUSED_RESULT;
- (void)downloadFilesWithActionArgs:(NSDictionary * _Nonnull)actionArgs defaultValues:(NSDictionary * _Nonnull)defaultValues definition:(ActionDefinition * _Nonnull)definition;
/// Download files for action arguments
/// File args are ActionArgs of Kind File or args with name prefixed with “<em>file</em>”
/// \param actionArgs Action arguments
///
/// \param defaultValues Default action arguments
///
/// \param definitionKinds Action Definition kinds
///
- (void)downloadFilesWithActionArgs:(NSDictionary * _Nonnull)actionArgs defaultValues:(NSDictionary * _Nonnull)defaultValues definitionKinds:(NSDictionary<NSString *, NSString *> * _Nonnull)definitionKinds;
- (BOOL)hasMissingFilesWithActionArgs:(NSDictionary * _Nonnull)actionArgs defaultValues:(NSDictionary * _Nonnull)defaultValues definitionKinds:(NSDictionary<NSString *, NSString *> * _Nonnull)definitionKinds SWIFT_WARN_UNUSED_RESULT;
@end

@class NSMutableDictionary;

SWIFT_CLASS("_TtC8Leanplum9ApiConfig")
@interface ApiConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ApiConfig * _Nonnull shared;)
+ (ApiConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable appId;
@property (nonatomic, readonly, copy) NSString * _Nullable accessKey;
@property (nonatomic) NSInteger socketPort;
@property (nonatomic) BOOL apiSSL;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nonnull apiHostName;
@property (nonatomic, copy) NSString * _Nonnull apiPath;
@property (nonatomic, copy) NSString * _Nonnull socketHost;
- (void)setAppId:(NSString * _Nonnull)appId accessKey:(NSString * _Nonnull)accessKey;
+ (void)attachApiKeysWithDict:(NSMutableDictionary * _Nonnull)dict;
@end



SWIFT_CLASS("_TtC8Leanplum13ContentMerger")
@interface ContentMerger : NSObject
/// Merges two values together - default and override.
/// For primitive types override is returned,
/// Dictionaries are merged and same keys are overridden,
/// Array overrides come as dictionary with indices and
/// are merged with default array values, (array and array cannot be merged).
/// note:
///
/// Currently action arguments are created and represented in objc
/// API data is also serialized through NSSerialization in objc
/// nil values come as NSNull
/// In the future, Optional (Any?) can used for parameters and return type or wrap it as  Optional<Any>.none as Any
/// Implementation mimics VarCache mergeHelper
/// \param vars The default value
///
/// \param diff The override value
///
///
/// returns:
/// The product of merging default and override values
+ (id _Nonnull)mergeWithVars:(id _Nonnull)vars diff:(id _Nonnull)diff SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIUserNotificationSettings;
@class NSData;

/// Manager responsible for handling push (remote) and local notifications
SWIFT_CLASS("_TtC8Leanplum20NotificationsManager")
@interface NotificationsManager : NSObject
@property (nonatomic, copy) LeanplumShouldHandleNotificationBlock _Nullable shouldHandleNotificationBlock;
@property (nonatomic) BOOL isPushDeliveryTrackingEnabled;
- (void)updateNotificationSettings;
- (void)saveNotificationSettings:(NSDictionary * _Nonnull)settings;
- (void)removeNotificationSettings;
- (void)getNotificationSettingsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary * _Nonnull, BOOL))completionHandler;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Leanplum24LPCTNotificationsManager")
@interface LPCTNotificationsManager : NotificationsManager
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPRequestSender (SWIFT_EXTENSION(Leanplum))
@property (nonatomic, copy) NSString * _Nonnull uuid;
@end


@interface Leanplum (SWIFT_EXTENSION(Leanplum))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPActionManager * _Nonnull actionManager;)
+ (LPActionManager * _Nonnull)actionManager SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Leanplum16MigrationManager")
@interface MigrationManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MigrationManager * _Nonnull shared;)
+ (MigrationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)launchWrapper;
- (void)fetchMigrationState:(void (^ _Nonnull)(void))completion;
@end


@interface MigrationManager (SWIFT_EXTENSION(Leanplum))
+ (NSString * _Nonnull)lpCleverTapRequestArg SWIFT_WARN_UNUSED_RESULT;
@end


@interface MigrationManager (SWIFT_EXTENSION(Leanplum))
- (void)handleMigrateStateWithMultiApiResponse:(id _Nonnull)multiApiResponse;
- (void)handleGetMigrateStateWithApiResponse:(id _Nonnull)apiResponse;
@end

enum MigrationState : NSInteger;
@class CleverTapInstanceCallback;

@interface MigrationManager (SWIFT_EXTENSION(Leanplum))
@property (nonatomic, readonly) enum MigrationState state;
@property (nonatomic, readonly, copy) NSString * _Nullable cleverTapAccountId;
@property (nonatomic, readonly, copy) NSString * _Nullable cleverTapAccountToken;
@property (nonatomic, readonly, copy) NSString * _Nullable cleverTapAccountRegion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull cleverTapAttributeMappings;
@property (nonatomic, readonly) BOOL hasLaunched;
@property (nonatomic, readonly) BOOL useLeanplum;
@property (nonatomic, readonly) BOOL useCleverTap;
- (void)track:(NSString * _Nullable)eventName value:(double)value info:(NSString * _Nullable)info params:(NSDictionary<NSString *, id> * _Nonnull)params;
- (void)trackPurchase:(NSString * _Nullable)eventName value:(double)value currencyCode:(NSString * _Nullable)currencyCode params:(NSDictionary<NSString *, id> * _Nonnull)params;
- (void)trackInAppPurchase:(NSString * _Nullable)eventName value:(double)value currencyCode:(NSString * _Nullable)currencyCode iOSTransactionIdentifier:(NSString * _Nullable)iOSTransactionIdentifier iOSReceiptData:(NSString * _Nullable)iOSReceiptData iOSSandbox:(BOOL)iOSSandbox params:(NSDictionary<NSString *, id> * _Nonnull)params;
- (void)advance:(NSString * _Nullable)eventName info:(NSString * _Nullable)info params:(NSDictionary<NSString *, id> * _Nonnull)params;
- (void)setUserAttributes:(NSDictionary * _Nonnull)attributes;
- (void)setUserId:(NSString * _Nonnull)userId;
- (void)setPushToken:(NSData * _Nonnull)token;
- (void)setTrafficSourceInfo:(NSDictionary * _Nonnull)info;
- (void)addInstanceCallback:(CleverTapInstanceCallback * _Nonnull)callback;
- (void)removeInstanceCallback:(CleverTapInstanceCallback * _Nonnull)callback;
- (void)setLogLevel:(enum LPLogLevel)level;
@end

typedef SWIFT_ENUM(NSInteger, MigrationState, open) {
  MigrationStateUndefined = 0,
  MigrationStateLeanplum = 1,
  MigrationStateDuplicate = 2,
  MigrationStateCleverTap = 3,
};





@interface NotificationsManager (SWIFT_EXTENSION(Leanplum))
@property (nonatomic) BOOL isAskToAskDisabled;
- (void)enableSystemPush;
- (void)enableProvisionalPush SWIFT_AVAILABILITY(ios,introduced=12.0);
- (BOOL)isPushEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)refreshPushPermissions;
- (NSDictionary * _Nullable)notificationSettingsToRequestParams:(NSDictionary * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Leanplum18NotificationsProxy")
@interface NotificationsProxy : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// TimeInterval when application was resumed
/// Used for iOS 9 notifications when state changes from inactive to active
@property (nonatomic) double resumedTimeInterval;
@property (nonatomic) UNNotificationPresentationOptions pushNotificationPresentationOption SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)addDidFinishLaunchingObserver;
- (void)removeDidFinishLaunchingObserver;
/// Swizzling Entry point
- (void)setupNotificationSwizzling;
@end


@protocol UIApplicationDelegate;

@interface NotificationsProxy (SWIFT_EXTENSION(Leanplum))
- (void)setCustomAppDelegate:(id <UIApplicationDelegate> _Nonnull)delegate;
@end


@class UNNotificationResponse;
@class UNNotification;
@class UILocalNotification;

@interface NotificationsProxy (SWIFT_EXTENSION(Leanplum))
- (void)applicationDidFinishLaunchingWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)didReceiveRemoteNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)userNotificationCenterWithDidReceive:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)userNotificationCenterWithWillPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)applicationWithDidReceive:(UILocalNotification * _Nonnull)notification SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)handleActionWithIdentifier:(NSString * _Nonnull)identifier forRemoteNotification:(NSDictionary * _Nonnull)notification;
- (void)handleActionWithIdentifier:(NSString * _Nonnull)identifier forLocalNotification:(UILocalNotification * _Nonnull)notification SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end


SWIFT_CLASS("_TtC8Leanplum7UIAlert")
@interface UIAlert : NSObject
+ (void)showWithTitle:(NSString * _Nonnull)title message:(NSString * _Nonnull)message cancelButtonTitle:(NSString * _Nonnull)cancelButtonTitle otherButtonTitles:(NSArray<NSString *> * _Nonnull)otherButtonTitles actionBlock:(void (^ _Nullable)(NSInteger))actionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC8Leanplum4User")
@interface User : NSObject
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable deviceId;
@property (nonatomic, copy) NSString * _Nullable pushToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Leanplum9Utilities")
@interface Utilities : NSObject
/// Returns Leanplum message Id from Notification userInfo.
/// Use this method to identify Leanplum Notifications
+ (NSString * _Nullable)messageIdFromUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nonnull)sha256WithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)sha256WithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)sha256_200WithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)sha256_40WithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTimer;

SWIFT_CLASS_NAMED("WeakTimer")
@interface LPWeakTimer : NSObject
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval target:(id _Nonnull)target userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))action SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
